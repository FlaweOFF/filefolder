const fs = require('fs');
const path = require('path');
const FormData = require('form-data');
const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = process.env.API_URL || 'http://localhost:3000';
const TEST_IMAGE_PATH = './test-image.jpg';

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –ø–∏–∫—Å–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG)
function createTestImage() {
    const testImageBuffer = Buffer.from([
        0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48,
        0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08,
        0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
        0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20,
        0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27,
        0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 0x14,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x08, 0xFF, 0xC4, 0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02,
        0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0x8A, 0xFF, 0xD9
    ]);
    
    fs.writeFileSync(TEST_IMAGE_PATH, testImageBuffer);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ endpoint
async function testBasicEndpoint() {
    console.log('\nüîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ endpoint');
    try {
        const response = await fetch(`${API_BASE_URL}/`);
        const data = await response.json();
        
        if (response.ok && data.message) {
            console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}`);
            return true;
        } else {
            console.log('‚ùå –ë–∞–∑–æ–≤—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑–æ–≤–æ–≥–æ endpoint:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function testImageUpload() {
    console.log('\nüîç –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    try {
        if (!fs.existsSync(TEST_IMAGE_PATH)) {
            createTestImage();
        }

        const formData = new FormData();
        formData.append('image', fs.createReadStream(TEST_IMAGE_PATH));

        const response = await fetch(`${API_BASE_URL}/api/upload`, {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (response.ok && data.success && data.data.imageId) {
            console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log(`   ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${data.data.imageId}`);
            console.log(`   URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${data.data.url}`);
            return data.data.imageId;
        } else {
            console.log('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('   –û—Ç–≤–µ—Ç:', data);
            return null;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
        return null;
    }
}

// –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
async function testGetImageInfo(imageId) {
    console.log('\nüîç –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏');
    try {
        const response = await fetch(`${API_BASE_URL}/api/image/${imageId}`);
        const data = await response.json();

        if (response.ok && data.success && data.data.id === imageId) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log(`   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: ${data.data.originalName}`);
            console.log(`   –†–∞–∑–º–µ—Ä: ${data.data.size} –±–∞–π—Ç`);
            console.log(`   MIME —Ç–∏–ø: ${data.data.mimetype}`);
            return true;
        } else {
            console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('   –û—Ç–≤–µ—Ç:', data);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
async function testDirectImageAccess(imageId) {
    console.log('\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é');
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        const infoResponse = await fetch(`${API_BASE_URL}/api/image/${imageId}`);
        const infoData = await infoResponse.json();
        
        if (!infoData.success) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏');
            return false;
        }

        const filename = infoData.data.filename;
        const imageResponse = await fetch(`${API_BASE_URL}/uploads/${filename}`);

        if (imageResponse.ok && imageResponse.headers.get('content-type').startsWith('image/')) {
            console.log('‚úÖ –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log(`   URL: ${API_BASE_URL}/uploads/${filename}`);
            return true;
        } else {
            console.log('‚ùå –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async function testGetAllImages() {
    console.log('\nüîç –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    try {
        const response = await fetch(`${API_BASE_URL}/api/images`);
        const data = await response.json();

        if (response.ok && data.success && Array.isArray(data.data)) {
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${data.count}`);
            return true;
        } else {
            console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('   –û—Ç–≤–µ—Ç:', data);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function testDeleteImage(imageId) {
    console.log('\nüîç –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    try {
        const response = await fetch(`${API_BASE_URL}/api/image/${imageId}`, {
            method: 'DELETE'
        });
        const data = await response.json();

        if (response.ok && data.success) {
            console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
            return true;
        } else {
            console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('   –û—Ç–≤–µ—Ç:', data);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    console.log(`üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${API_BASE_URL}`);
    console.log('=' .repeat(60));

    const results = {
        basic: false,
        upload: null,
        getInfo: false,
        directAccess: false,
        getAll: false,
        delete: false
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results.basic = await testBasicEndpoint();
    
    if (results.basic) {
        results.upload = await testImageUpload();
        
        if (results.upload) {
            results.getInfo = await testGetImageInfo(results.upload);
            results.directAccess = await testDirectImageAccess(results.upload);
            results.getAll = await testGetAllImages();
            results.delete = await testDeleteImage(results.upload);
        }
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\n' + '=' .repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('=' .repeat(60));
    console.log(`‚úÖ –ë–∞–∑–æ–≤—ã–π endpoint: ${results.basic ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${results.upload ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${results.getInfo ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø: ${results.directAccess ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${results.getAll ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${results.delete ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);

    const successCount = Object.values(results).filter(r => r === true).length;
    const totalTests = 6;
    
    console.log('\n' + '=' .repeat(60));
    console.log(`üéØ –ò–¢–û–ì–û: ${successCount}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (successCount === totalTests) {
        console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
        console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
    }

    // –û—á–∏—Å—Ç–∫–∞
    if (fs.existsSync(TEST_IMAGE_PATH)) {
        fs.unlinkSync(TEST_IMAGE_PATH);
        console.log('\nüßπ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runTests().catch(console.error);
}

module.exports = { runTests };
